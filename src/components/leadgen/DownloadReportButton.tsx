
import React from 'react';
import { Button } from '@/components/ui/button';
import { Download } from 'lucide-react';
import { LeadRequest } from '@/types/leadGenAI';
import { toast } from 'sonner';

interface DownloadReportButtonProps {
  leadData: LeadRequest;
}

const DownloadReportButton: React.FC<DownloadReportButtonProps> = ({ leadData }) => {
  const generateReport = () => {
    try {
      // Validate that we have data to generate a report
      if (!leadData?.stakeholders?.length || !leadData.intents || !leadData.salesPlan) {
        toast.error("Incomplete data for report generation");
        return;
      }

      // Create report content
      let content = `# Sales Intelligence Report\n\n`;
      content += `## Target: ${leadData.targetClient}\n`;
      content += `Website: ${leadData.targetClientWebsite}\n\n`;
      content += `Generated for: ${leadData.providerCompany}\n`;
      content += `Offering: ${leadData.providerServices}\n\n`;
      
      // Add stakeholders
      content += `## Key Stakeholders\n\n`;
      leadData.stakeholders.forEach(stakeholder => {
        content += `- **${stakeholder.name}** - ${stakeholder.title}\n`;
        content += `  LinkedIn: ${stakeholder.linkedinUrl}\n`;
        if (stakeholder.email) {
          content += `  Email: ${stakeholder.email}\n`;
        }
        content += `\n`;
      });
      
      // Add intent information
      content += `## Company Intent\n\n`;
      content += `Urgency Score: ${leadData.intents.urgencyScore}/10\n\n`;
      content += `${leadData.intents.activitySummary}\n\n`;
      
      // Add sales plan
      content += `## Cold Call Script\n\n`;
      content += `${leadData.salesPlan.coldCallScript}\n\n`;
      
      content += `## Email Sequence\n\n`;
      content += `${leadData.salesPlan.emailSequence}\n\n`;
      
      content += `## Marketing Tips\n\n`;
      content += `${leadData.salesPlan.marketingTips}\n\n`;
      
      content += `---\n`;
      content += `Generated by MimiAI LeadGenAI on ${new Date().toLocaleDateString()}\n`;
      
      // Create blob and download
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${leadData.targetClient.replace(/\s+/g, '-')}_Sales_Report.md`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      toast.success('Report downloaded successfully');
    } catch (error) {
      console.error('Error generating report:', error);
      toast.error('Failed to generate report');
    }
  };

  return (
    <Button onClick={generateReport} className="w-full">
      <Download className="h-4 w-4 mr-2" />
      Download Full Report
    </Button>
  );
};

export default DownloadReportButton;
